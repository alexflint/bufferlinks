// Code generated by go-bindata.
// sources:
// templates/enqueue.html
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnqueueHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x73\xea\x36\x10\x7d\xbf\xbf\x42\xd5\x6b\x06\x8b\x12\x48\x68\xc7\xf6\xcc\x05\xee\xbd\x0d\xd0\x42\x88\x9b\x90\xbc\x74\x64\x79\xc1\xc2\xb2\x64\x24\x99\x89\x27\x93\xff\xde\xb1\x85\x53\xf2\xd1\x4e\x27\x4f\x5a\xef\x5a\xe7\xec\xd1\x1e\xc9\xff\x69\xb2\x18\x47\xf7\xcb\x6f\x28\xb5\xb9\x08\xbf\xf8\x6e\x41\xc8\x4f\x81\x26\x75\x80\x90\x6f\xb9\x15\x10\x8e\xca\xcd\x06\x34\x9a\x73\x99\x19\x9f\xb8\x9c\xab\x1b\xa6\x79\x61\x91\xad\x0a\x08\xb0\x85\x47\x4b\x76\xf4\x40\x5d\x16\x23\xa3\x59\x80\x53\x6b\x0b\xf3\x2b\x21\x4c\x25\xe0\xed\xf6\x25\xe8\xca\x63\x2a\x27\x2e\xec\xf4\xbc\x9f\xbd\xbe\x97\x73\xe9\xed\x0c\x0e\x7d\xe2\xf6\xbe\x86\x7f\x85\x93\xd3\x47\x96\x48\x2f\x56\xca\x1a\xab\x69\x51\x7f\xd4\x78\x2f\x09\xd2\xf7\xba\x5e\xb7\x43\x45\x91\x52\x6f\x40\x76\xe6\x9f\x52\xcb\x83\xb8\xb4\xb0\xd5\xdc\x56\x01\x36\x29\x3d\x1f\xf6\x3b\xa3\x39\xbf\xba\x9c\x46\x0f\xf9\xd9\xf4\x4e\x6c\x67\xb4\xfb\x7b\x37\xfb\xb1\x2a\xa6\xf1\xf7\xde\x74\xb8\x3f\xdb\x6b\xb8\xd5\xb3\xd1\xb8\x7f\x09\xe7\xb3\x8b\xd1\xdd\xe5\x30\xfb\x31\xd7\xe3\x0c\x56\xeb\x8b\xab\x5f\x56\x6a\x86\x11\xd3\xca\x18\xa5\xf9\x96\xcb\x00\x53\xa9\x64\x95\xab\xf2\xbd\x26\xc1\x65\x86\x34\x88\x00\x1b\x5b\x09\x30\x29\x80\xc5\x28\xd5\xb0\xf9\xbc\x46\x66\xde\x8a\x64\xe6\x43\x95\x5f\x2b\x43\x6f\xcf\x0e\xd7\x2a\x3a\xcf\x16\x5f\xd7\x0f\x99\xe8\xf6\x96\x51\x7a\x98\xe8\xe1\x6f\xf7\xb3\xe5\x43\xfa\x47\x34\x48\xc9\x78\xbd\x19\x45\xe9\xcd\x6a\x7d\x7d\xb1\xbb\x1b\x4c\x16\x3d\xc8\x96\x83\x5b\xfe\x3d\xe1\xff\xae\xf2\xbf\xc4\x9d\xd8\xa3\xe9\xcb\x89\x25\xc6\x52\xcb\x19\x01\xb9\x2f\xa1\x84\xa6\xe5\xd0\x27\x35\x44\x63\x43\xd2\xfa\xd0\x8f\x55\x52\x85\x5f\x1c\x43\xc2\x0f\x88\x09\x6a\x4c\x80\x99\x92\x96\x72\x09\xfa\xc8\x8e\x90\xbf\x51\x3a\x6f\xcb\x75\xdc\x39\x82\x63\x94\x83\x4d\x55\x12\xe0\xe5\xe2\x26\xc2\x88\x32\xcb\x95\x0c\x30\x61\x2a\xcf\xb9\x7d\x01\xa8\xdd\xdf\xfb\x08\xa0\x53\x37\xc3\xe5\x16\x87\xdf\x5c\x02\x8d\x95\xb4\x20\xad\x4f\xd2\xde\xc9\xee\x5a\x24\xd5\x40\x91\xa4\x39\xb8\x16\x41\x5a\xfc\x0a\xb2\x4e\x6a\x25\x30\x2a\x04\x65\x90\x2a\x91\x80\x0e\xf0\xb8\xfd\x55\xc3\xbe\xe4\x1a\x12\x44\x4b\xab\x36\x8a\x95\x26\xf4\x49\x8b\x7b\x42\x95\xf0\x43\xe8\x73\x59\x94\xa7\xf7\x0f\x1f\x89\x4b\x2d\x30\x3a\x50\x51\x42\x80\x9f\x9e\xbc\x3f\x57\xf3\xe7\xe7\xfa\x74\xeb\x4d\xff\x13\xa2\x1e\xc4\x5f\xcd\x65\x7f\xd3\x69\xfd\x0e\xa0\xc8\x15\xda\x66\x3f\x01\x9d\x80\xbb\x17\x5c\xc9\x8f\x08\x26\x27\xe5\x77\xe8\x71\x69\xad\x92\xed\xa9\xc6\x56\xa2\xd8\xca\x8e\xd8\x36\x4b\xa1\x79\x4e\x75\xd5\xc4\xb1\x50\x2c\x6b\x1d\x68\xca\xb8\x19\xf6\x71\x84\x3e\x71\x30\x2f\xee\x21\xf5\x78\x8e\x4e\x76\x84\x8d\x0f\x9d\xfd\x7c\xe2\x1e\xc8\xbf\x03\x00\x00\xff\xff\xc9\x4f\x3a\xca\x38\x05\x00\x00")

func templatesEnqueueHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnqueueHtml,
		"templates/enqueue.html",
	)
}

func templatesEnqueueHtml() (*asset, error) {
	bytes, err := templatesEnqueueHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/enqueue.html", size: 1336, mode: os.FileMode(420), modTime: time.Unix(1481171905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xdf\x73\xe2\x36\x10\x7e\xcf\x5f\xa1\x6a\xfa\xd0\x4e\xce\x16\x47\x7e\xd1\x8c\xe5\x9b\x00\x97\x6b\x42\xda\x24\x94\x26\xb9\xbc\x29\xd6\x82\x05\xb6\x64\xa4\x85\x83\x61\xf8\xdf\x3b\xb2\x03\x07\x84\xb4\x9d\xe3\x01\xb4\xbb\xda\x6f\xbf\x6f\xb5\x12\xd1\x4f\xed\xdb\x56\xef\xeb\xdd\x67\x92\x62\x9e\xc5\x07\x51\xf5\x43\x48\x94\x82\x90\x7e\x41\x48\x84\x0a\x33\x88\x9b\x93\x7e\x1f\x2c\xb9\x51\x7a\xe4\x22\x56\xf9\xaa\x78\x0e\x28\x48\x92\x0a\xeb\x00\x39\x9d\x60\x3f\x68\xd0\xcd\x90\x16\x39\x70\x3a\x55\xf0\xad\x30\x16\x29\x49\x8c\x46\xd0\xc8\xe9\x37\x25\x31\xe5\x12\xa6\x2a\x81\xa0\x34\x3e\x10\xa5\x15\x2a\x91\x05\x2e\x11\x19\xf0\x8f\x1f\x88\x4b\xad\xd2\xa3\x00\x4d\xd0\x57\xc8\xb5\xd9\x82\x4e\x11\x8b\x00\xc6\x13\x35\xe5\x74\x16\x4c\x44\x90\x98\xbc\x10\xa8\x5e\x32\xd8\xa8\xa3\x80\x83\x1c\x00\x8d\x0f\xaa\x54\x97\x58\x55\x20\xc1\x79\x01\x9c\x22\xcc\x90\x0d\xc5\x54\x54\x5e\x4a\x9c\x4d\x38\xf5\xc0\xee\x9c\xb1\xc4\x48\x08\x87\xe3\x09\xd8\x79\x98\x98\x9c\x55\xcb\xa0\x1e\x7e\x0c\x8f\xc3\x5c\xe9\x70\xe8\x68\x1c\xb1\x2a\x37\xde\x82\xdf\xc2\xc9\xc5\x2c\x91\x3a\x7c\x31\x06\x1d\x5a\x51\x78\xc3\xe3\xad\x1d\xec\x38\xac\x85\xb5\x40\x64\x45\x2a\xc2\x13\x36\x74\xdf\x43\xab\x3a\x44\x69\x84\x81\x55\x38\xe7\xd4\xa5\xe2\xa8\x71\x1c\x34\x6f\xd4\xd5\xd9\x75\xef\x39\x3f\xbc\x7e\xcc\x06\x1d\x51\xfb\xa3\x36\xfa\xd2\x2d\xae\x5f\x2e\xeb\xd7\x8d\xf1\xe1\xd8\xc2\x83\xed\x34\x5b\xc7\x67\x70\xd4\x39\x6d\x3e\x9e\x35\x46\x5f\x6e\x6c\x6b\x04\xdd\xa7\xd3\xab\xdf\xba\xa6\x43\x49\x62\x8d\x73\xc6\xaa\x81\xd2\x9c\x0a\x6d\xf4\x3c\x37\x93\xb7\x9a\x32\xa5\x47\xc4\x42\xc6\xa9\xc3\x79\x06\x2e\x05\x40\x4a\x52\x0b\xfd\x1f\xd7\x98\xb8\x5d\x91\x89\xdb\xab\xf2\x62\xee\xc4\xc3\xe1\xf4\xde\xf4\x8e\x46\xb7\x17\x4f\xcf\xa3\xac\x56\xbf\xeb\xa5\xd3\xb6\x6d\xfc\xfe\xb5\x73\xf7\x9c\xfe\xd9\x3b\x49\x59\xeb\xa9\xdf\xec\xa5\x7f\x75\x9f\xee\x4f\x87\x8f\x27\xed\xdb\x3a\x8c\xee\x4e\x1e\xd4\xa5\x54\xef\xab\xfc\x37\x71\x1b\xe3\x51\xf2\xaa\xc4\x32\x87\x02\x55\xc2\x94\x96\x30\x2b\x09\xc7\x11\xf3\x00\xe5\xad\x61\xab\x6b\x13\xbd\x18\x39\x5f\xcd\x9b\x54\x53\x92\x64\xc2\x39\x4e\x51\xf8\xd1\xac\xea\xfa\xab\xe5\xcd\xad\x18\x29\xbf\x03\x87\x56\x15\x20\xd7\x3b\xfd\xde\x0a\x92\xac\x3f\x8b\x85\x15\x7a\x00\xe4\x67\x61\x51\x25\x19\x90\x73\x4e\xc2\x8b\x6a\xed\x96\xcb\x8d\x9d\x3e\xdb\xc6\x5b\x0e\xef\x92\x24\x31\x99\x2b\x84\xe6\xb4\x4e\x77\xc3\x7e\x90\xd1\x1a\x3d\x88\x23\xf1\xaa\x7d\xb1\x58\x95\x0a\xff\xee\xde\x2c\x97\x34\xde\xf0\xf4\xfc\x8b\xb0\x5c\x46\x4c\xc4\xe4\x97\x0d\xff\x25\x80\x5c\x2e\x7f\x8d\xd8\x2b\xda\x2e\x0b\x86\x72\x0f\xb3\x3d\x6c\x56\x2c\x98\x34\x1a\x3e\xbd\xc2\xf3\x8d\x4a\x57\x6d\x4f\xa9\x6d\x34\x78\x12\xff\x59\x27\x62\xbb\x3d\x59\x37\xb4\x1c\x88\x73\xbe\xee\x6c\x58\xbe\x7a\x3b\x2d\x2d\x9b\xba\x3a\xbb\xc5\x42\xf5\xab\xbc\xf0\x7e\x02\x13\x2f\xd9\x1b\xc1\xb8\x34\x16\x0b\xd0\xd2\x93\x7b\xab\x0a\xa5\x6f\x62\x99\xd8\xf2\xef\xd5\x0c\x7d\x0f\xf7\x36\x00\xe5\xd6\x51\x94\x39\xdf\xcf\xa1\x34\xdb\x26\x17\x4a\x57\xa7\xf0\x3f\x50\x18\xe8\x92\xe0\xa7\x89\xcd\xf8\x0e\xe4\xe7\x2a\xf4\x1e\xd2\xbe\xee\x95\x22\x0f\xde\xf7\x44\x6c\x6b\x86\x23\x56\xce\xfa\xeb\x25\x64\x52\x4d\xab\x3b\x54\xed\x89\x58\xf5\x5f\xf4\x4f\x00\x00\x00\xff\xff\xbc\x73\x88\xe4\xa3\x06\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1699, mode: os.FileMode(420), modTime: time.Unix(1481176470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/enqueue.html": templatesEnqueueHtml,
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"enqueue.html": &bintree{templatesEnqueueHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

